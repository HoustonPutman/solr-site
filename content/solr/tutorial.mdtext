<div class="tutorial">

# Solr Tutorial

##Overview

This document covers the basics of running Solr using an example
schema, and some sample data.

##Requirements

To follow along with this tutorial, you will need...

- Java 1.6 or greater.  Some places you can get it are from
<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle</a>,
<a href="http://openjdk.java.net/">Open JDK</a>,
<a href="http://www.ibm.com/developerworks/java/jdk/">IBM</a>, or
<br/>
Running <code class="inline">java -version</code> at the command line should indicate a version
number starting with 1.6.  Gnu's GCJ is not supported and does not work with Solr.

- A <a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/">Solr release</a>.

##Getting Started
*
Please run the browser showing this tutorial and the Solr server on the same machine so tutorial links will correctly point to your Solr server.
*

Begin by unziping the Solr release and changing your working directory
to be the "<code  class="inline">example</code>" directory.  (Note that the base directory name may vary with the version of Solr downloaded.)  For example, with a shell in UNIX, Cygwin, or MacOS:

<div class="cmd">
    user:~solr$ ls
    solr-nightly.zip
    user:~solr$ unzip -q solr-nightly.zip
    user:~solr$ cd solr-nightly/example/
</div>

Solr can run in any Java Servlet Container of your choice, but to simplify
this tutorial, the example index includes a small installation of Jetty.


To launch Jetty with the Solr WAR, and the example configs, just run the <code  class="inline">start.jar</code> ...

<div class="cmd">
    user:~/solr/example$ java -jar start.jar
    2009-10-23 16:42:53.816::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
    2009-10-23 16:42:53.907::INFO:  jetty-6.1.26
    
    ...
    
    Oct 23, 2009 4:41:56 PM org.apache.solr.core.SolrCore registerSearcher
    INFO: [] Registered new searcher Searcher@7c3885 main
</div>

This will start up the Jetty application server on port 8983, and use your terminal to display the logging information from Solr.


You can see that the Solr is running by loading <a href="http://localhost:8983/solr/admin/">http://localhost:8983/solr/admin/</a> in your web browser.  This is the main starting point for Administering Solr.


##Indexing Data


Your Solr server is up and running, but it doesn't contain any data.  You can
modify a Solr index by POSTing XML Documents containing instructions to add (or
update) documents, delete documents, commit pending adds and deletes, and
optimize your index.  


The <code class="inline">exampledocs</code> directory contains samples of the types of
instructions Solr expects, as well as a java utility for posting them from the
command line (a <code  class="inline">post.sh</code> shell script is also available, but for
this tutorial we'll use the cross-platform Java client).    To try this,
open a new terminal window, enter the exampledocs directory, and run
"<code  class="inline">java -jar post.jar</code>" on some of the XML files in that directory,
indicating the URL of the Solr server:

<div class="cmd">
    user:~/solr/example/exampledocs$ java -jar post.jar solr.xml monitor.xml
    SimplePostTool: version 1.2
    SimplePostTool: WARNING: Make sure your XML documents are encoded in UTF-8, \
              other encodings are not currently supported
    SimplePostTool: POSTing files to http://localhost:8983/solr/update..
    SimplePostTool: POSTing file solr.xml
    SimplePostTool: POSTing file monitor.xml
    SimplePostTool: COMMITting Solr index changes..
</div>

You have now indexed two documents in Solr, and committed these changes.  
You can now search for "solr" using the "Make a Query" interface on the Admin screen, and you should get one result.  
Clicking the "Search" button should take you to the following URL...


<a href="http://localhost:8983/solr/select/?q=solr&amp;start=0&amp;rows=10&amp;indent=on">http://localhost:8983/solr/select/?q=solr&amp;start=0&amp;rows=10&amp;indent=on</a>

You can index all of the sample data, using the following command (assuming your command line shell supports the *.xml notation):

<div class="cmd">
    user:~/solr/example/exampledocs$ java -jar post.jar *.xml
    SimplePostTool: version 1.2
    SimplePostTool: WARNING: Make sure your XML documents are encoded in UTF-8, \
                other encodings are not currently supported
    SimplePostTool: POSTing files to http://localhost:8983/solr/update..
    SimplePostTool: POSTing file hd.xml
    SimplePostTool: POSTing file ipod_other.xml
    SimplePostTool: POSTing file ipod_video.xml
    SimplePostTool: POSTing file mem.xml
    SimplePostTool: POSTing file monitor.xml
    SimplePostTool: POSTing file monitor2.xml
    SimplePostTool: POSTing file mp500.xml
    SimplePostTool: POSTing file sd500.xml
    SimplePostTool: POSTing file solr.xml
    SimplePostTool: POSTing file spellchecker.xml
    SimplePostTool: POSTing file utf8-example.xml
    SimplePostTool: POSTing file vidcard.xml
    SimplePostTool: COMMITting Solr index changes..
</div>

...and now you can search for all sorts of things using the default <a href="http://wiki.apache.org/solr/SolrQuerySyntax">Solr Query Syntax</a> (a superset of the Lucene query syntax)...

- <a href="http://localhost:8983/solr/select/?q=video">video</a>
- <a href="http://localhost:8983/solr/select/?q=name:video">name:video</a>
- <a href="http://localhost:8983/solr/select/?q=%2Bvideo+%2Bprice%3A[*+TO+400]">+video +price:[* TO 400]</a>

There are many other different ways to import your data into Solr... one can


- Import records from a database using the 
<a href="http://wiki.apache.org/solr/DataImportHandler">Data Import Handler (DIH)</a>.

- <a href="http://wiki.apache.org/solr/UpdateCSV">Load a CSV file</a> (comma separated values),
including those exported by Excel or MySQL.

- <a href="http://wiki.apache.org/solr/UpdateJSON">POST JSON documents</a>

- Index binary documents such as Word and PDF with 
<a href="http://wiki.apache.org/solr/ExtractingRequestHandler">Solr Cell</a> (ExtractingRequestHandler).

- 
Use <a href="http://wiki.apache.org/solr/Solrj">SolrJ</a> for Java or other Solr clients to
programatically create documents to send to Solr.


##Updating Data

You may have noticed that even though the file <code  class="inline">solr.xml</code> has now
been POSTed to the server twice, you still only get 1 result when searching for
"solr".  This is because the example schema.xml specifies a "uniqueKey" field
called "<code  class="inline">id</code>".  Whenever you POST instructions to Solr to add a
document with the same value for the uniqueKey as an existing document, it
automatically replaces it for you.  You can see that that has happened by
looking at the values for <code  class="inline">numDocs</code> and <code  class="inline">maxDoc</code> in the
"CORE"/searcher section of the statistics page...  

<a href="http://localhost:8983/solr/admin/stats.jsp">http://localhost:8983/solr/admin/stats.jsp</a>

*numDocs* represents the number of searchable documents in the
index (and will be larger than the number of XML files since some files
contained more than one <code  class="inline">&lt;doc&gt;</code>). *maxDoc*
may be larger as the maxDoc count includes logically deleted documents that
have not yet been removed from the index. You can re-post the sample XML
files over and over again as much as you want and numDocs will never
increase,because the new documents will constantly be replacing the old.


Go ahead and edit the existing XML files to change some of the data, and re-run
the <code  class="inline">java -jar post.jar</code> command, you'll see your changes reflected
in subsequent searches.


##Deleting Data
You can delete data by POSTing a delete command to the update URL and specifying the value
  of the document's unique key field, or a query that matches multiple documents (be careful with that one!).  Since these commands
  are smaller, we will specify them right on the command line rather than reference an XML file.

Execute the following command to delete a document

<div class="cmd">
java -Ddata=args -Dcommit=no -jar post.jar "&lt;delete&gt;&lt;id&gt;SP2514N&lt;/id&lt;&gt;/delete&gt;"
</div>

Now if you go to the <a href="http://localhost:8983/solr/admin/stats.jsp">statistics</a> page and scroll down
   to the UPDATE_HANDLERS section and verify that "<code class="inline">deletesById : 1</code>"
If you search for <a href="http://localhost:8983/solr/select?q=id:SP2514N">id:SP2514N</a> it will still be found,
   because index changes are not visible until, and a new searcher is opened.  To cause
   this to happen, send a commit command to Solr (post.jar does this for you by default):

<div class="cmd">
java -jar post.jar
</div>

Now re-execute the previous search and verify that no matching documents are found.  Also revisit the
statistics page and observe the changes in both the UPDATE_HANDLERS section and the CORE section.
Here is an example of using delete-by-query to delete anything with
  <a href="http://localhost:8983/solr/select?q=name:DDR&amp;fl=name">DDR</a> in the name:

<div class="cmd">
java -Ddata=args -jar post.jar "&lt;delete&gt;&lt;query&lt;name:DDR&lt;/query&gt;&lt;/delete&gt;"
</div>

Commit can be an expensive operation so it's best to make many changes to an index in a batch and
  then send the commit command at the end.  There is also an optimize command that does the same thing as commit,
  in addition to merging all index segments into a single segment, making it faster to search and causing any
  deleted documents to be removed.  All of the update commands are documented <a href="http://wiki.apache.org/solr/UpdateXmlMessages">here</a>.


To continue with the tutorial, re-add any documents you may have deleted by going to the <code class="inline">exampledocs</code> directory and executing

<div class="cmd">
java -jar post.jar *.xml
</div>

##Querying Data


Searches are done via HTTP GET on the select URL with the query string in the q parameter.
You can pass a number of optional <a href="http://wiki.apache.org/solr/StandardRequestHandler">request parameters</a>
to the request handler to control what information is returned.  For example, you can use the "fl" parameter
to control what stored fields are returned, and if the relevancy score is returned...

  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;fl=name,id">q=video&amp;fl=name,id</a>       (return only name and id fields)   
  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;fl=name,id,score">q=video&amp;fl=name,id,score</a>  (return relevancy score as well) 
  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;fl=*,score">q=video&amp;fl=*,score</a>        (return all stored fields, as well as relevancy score)  
  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;sort=price desc&amp;fl=name,id,price">q=video&amp;sort=price desc&amp;fl=name,id,price</a>  (add sort specification: sort by price descending) 
  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;wt=json">q=video&amp;wt=json</a> (return response in JSON format)  

Solr provides a <a href="http://localhost:8983/solr/admin/form.jsp">query form</a> within the web admin interface
that allows setting the various request parameters and is useful when trying out or debugging queries.

##Sorting

  Solr provides a simple method to sort on one or more indexed fields.
  Use the 'sort' parameter to specify "field direction" pairs...

  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;sort=price+desc">q=video&amp;sort=price desc</a>
  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;sort=price+asc">q=video&amp;sort=price asc</a>
  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;sort=inStock+asc,price+desc">q=video&amp;sort=inStock asc, price desc</a>

  "score" can also be used as a field name when specifying a sort...

  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;sort=score+desc">q=video&amp;sort=score desc</a>
  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;sort=inStock+asc,score+desc">q=video&amp;sort=inStock asc, score desc</a>

  Complex functions may also be used to sort results...

  - <a href="http://localhost:8983/solr/select/?indent=on&amp;q=video&amp;sort=div(popularity,add(price,1))+desc">q=video&amp;sort=div(popularity,add(price,1)) desc</a>

  If no sort is specified, the default is <code class="inline">score desc</code> to return the matches having the highest relevancy.

##Highlighting

Hit highlighting returns relevent snippets of each returned document, and highlights
keywords from the query within those context snippets.


The following example searches for <code class="inline">video card</code> and requests
highlighting on the fields <code class="inline">name,features</code>.  This causes a
<code class="inline">highlighting</code> section to be added to the response with the
words to highlight surrounded with <code class="inline">&lt;em&gt;</code> (for emphasis)
tags.

<a href="http://localhost:8983/solr/select/?wt=json&amp;indent=on&amp;q=video+card&amp;fl=name,id&amp;hl=true&amp;hl.fl=name,features">...&amp;q=video card&amp;fl=name,id&amp;hl=true&amp;hl.fl=name,features</a>

More request parameters related to controlling highlighting may be found
<a href="http://wiki.apache.org/solr/HighlightingParameters">here</a>.

<!-- highlighting -->

##Faceted Search

Faceted search takes the documents matched by a query and generates counts for various
properties or categories.  Links are usually provided that allows users to "drill down" or
refine their search results based on the returned categories.


The following example searches for all documents (<code class="inline">\*:\*</code>) and
requests counts by the category field <code class="inline">cat</code>.


<a href="http://localhost:8983/solr/select/?wt=json&amp;indent=on&amp;q=*:*&amp;fl=name&amp;facet=true&amp;facet.field=cat">...&amp;q=\*:\*&amp;facet=true&amp;facet.field=cat</a>


Notice that although only the first 10 documents are returned in the results list,
the facet counts generated are for the complete set of documents that match the query.



We can facet multiple ways at the same time.  The following example adds a facet on the
boolean <code class="inline">inStock</code> field:


<a href="http://localhost:8983/solr/select/?wt=json&amp;indent=on&amp;q=\*:\*&amp;fl=name&amp;facet=true&amp;facet.field=cat&amp;facet.field=inStock">...&amp;q=\*:\*&amp;facet=true&amp;facet.field=cat&amp;facet.field=inStock</a>

Solr can also generate counts for arbitrary queries. The following example
queries for <code class="inline">ipod</code> and shows prices below and above 100 by using
range queries on the price field.

<a href="http://localhost:8983/solr/select/?wt=json&amp;indent=on&amp;q=ipod&amp;fl=name&amp;facet=true&amp;facet.query=price:[0+TO+100]&amp;facet.query=price:[100+TO+*]">...&amp;q=ipod&amp;facet=true&amp;facet.query=price:[0 TO 100]&amp;facet.query=price:[100 TO *]</a>

One can even facet by date ranges.  This example requests counts for the manufacture date (<code class="inline">manufacturedate_dt</code> field) for each year between 2004 and 2010.

<a href="http://localhost:8983/solr/select/?wt=json&amp;indent=on&amp;q=*:*&amp;fl=name,manufacturedate_dt&amp;facet=true&amp;facet.date=manufacturedate_dt&amp;facet.date.start=2004-01-01T00:00:00Z&amp;facet.date.end=2010-01-01T00:00:00Z&amp;facet.date.gap=%2b1YEAR">...&amp;q=\*:\*&amp;facet=true&amp;facet.date=manufacturedate_dt&amp;facet.date.start=2004-01-01T00:00:00Z&amp;facet.date.end=2010-01-01T00:00:00Z&amp;facet.date.gap=+1YEAR</a>

More information on faceted search may be found on the 
<a href="http://wiki.apache.org/solr/SolrFacetingOverview">faceting overview</a>
and
<a href="http://wiki.apache.org/solr/SimpleFacetParameters">faceting parameters</a>
pages.


<!-- faceted search -->

##Search UI

Solr includes an example search interface built with velocity templating
that demonstrates many features, including searching, faceting, highlighting,
autocomplete, and geospatial searching. 


Try it out at
<a href="http://localhost:8983/solr/browse">http://localhost:8983/solr/browse</a>

<!-- Search UI -->

##Text Analysis

Text fields are typically indexed by breaking the field into words and applying various transformations such as
lowercasing, removing plurals, or stemming to increase relevancy.  The same text transformations are normally
applied to any queries in order to match what is indexed.

Example queries demonstrating relevancy improving transformations:

- A search for
   <a href="http://localhost:8983/solr/select/?indent=on&amp;q=power-shot&amp;fl=name">power-shot</a>
   matches <code class="inline">PowerShot</code>, and
  <a href="http://localhost:8983/solr/select/?indent=on&amp;q=adata&amp;fl=name">adata</a>
  matches <code class="inline">A-DATA</code> due to the use of WordDelimiterFilter and LowerCaseFilter.


- A search for
  <a href="http://localhost:8983/solr/select/?indent=on&amp;q=features:recharging&amp;fl=name,features">features:recharging</a>
   matches <code class="inline">Rechargeable</code> due to stemming with the EnglishPorterFilter.


- A search for
   <a href="http://localhost:8983/solr/select/?indent=on&amp;q=&quot;1 gigabyte&quot;&amp;fl=name">"1 gigabyte"</a>
   matches things with <code class="inline">GB</code>, and the misspelled
  <a href="http://localhost:8983/solr/select/?indent=on&amp;q=pixima&amp;fl=name">pixima</a>
   matches <code class="inline">Pixma</code> due to use of a SynonymFilter.

The <a href="http://wiki.apache.org/solr/SchemaXml">schema</a> defines
the fields in the index and what type of analysis is applied to them.  The current schema your server is using
may be accessed via the <code class="inline">[SCHEMA]</code> link on the <a href="http://localhost:8983/solr/admin/">admin</a> page.

A full description of the analysis components, Analyzers, Tokenizers, and TokenFilters
available for use is <a href="http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters">here</a>.

##Analysis Debugging
There is a handy <a href="http://localhost:8983/solr/admin/analysis.jsp">analysis</a>
  debugging page where you can see how a text value is broken down into words,
  and shows the resulting tokens after they pass through each filter in the chain.


  <a href="http://localhost:8983/solr/admin/analysis.jsp?name=name&amp;val=Canon+Power-Shot+SD500">This</a>
  shows how "<code class="inline">Canon Power-Shot SD500</code>" would be indexed as a value in the name field.  Each row of
  the table shows the resulting tokens after having passed through the next TokenFilter in the Analyzer for the <code class="inline">name</code> field.
  Notice how both <code class="inline">powershot</code> and <code class="inline">power</code>, <code class="inline">shot</code> are indexed.  Tokens generated at the same position
  are shown in the same column, in this case <code class="inline">shot</code> and <code class="inline">powershot</code>.

Selecting <a href="http://localhost:8983/solr/admin/analysis.jsp?name=name&amp;verbose=on&amp;val=Canon+Power-Shot+SD500">verbose output</a>
will show more details, such as the name of each analyzer component in the chain, token positions, and the start and end positions
of the token in the original text.

Selecting <a href="http://localhost:8983/solr/admin/analysis.jsp?name=name&amp;highlight=on&amp;val=Canon+Power-Shot+SD500&amp;qval=Powershot sd-500">highlight matches</a>
when both index and query values are provided will take the resulting terms from the query value and highlight
all matches in the index value analysis.

<a href="http://localhost:8983/solr/admin/analysis.jsp?name=text&amp;highlight=on&amp;val=Four+score+and+seven+years+ago+our+fathers+brought+forth+on+this+continent+a+new+nation%2C+conceived+in+liberty+and+dedicated+to+the+proposition+that+all+men+are+created+equal.+&amp;qval=liberties+and+equality">Here</a>
is an example of stemming and stop-words at work.

##Conclusion

Congratulations!  You successfully ran a small Solr instance, added some
documents, and made changes to the index.  You learned about queries, text
analysis, and the Solr admin interface.  You're ready to start using Solr on
your own project!  Continue on with the following steps:


- Subscribe to the Solr <a href="mailing_lists.html">mailing lists</a>!
- Make a copy of the Solr example directory as a template for your project.
- Customize the schema and other config in solr/conf/ to meet your needs. 



Solr as a ton of other features that we haven't touched on here, including
<a href="http://wiki.apache.org/solr/DistributedSearch">distributed search</a>
to handle huge document collections,
<a href="http://wiki.apache.org/solr/FunctionQuery">function queries</a>,
<a href="http://wiki.apache.org/solr/StatsComponent">numeric field statistics</a>,
and
<a href="http://wiki.apache.org/solr/ClusteringComponent">search results clustering</a>.
Explore the <a href="http://wiki.apache.org/solr/FrontPage">Solr Wiki</a> to find out
more details about Solr's many
<a href="features.html">features</a>.

Have Fun, and we'll see you on the Solr mailing lists!
</div>