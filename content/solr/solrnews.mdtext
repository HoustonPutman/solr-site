# Solr News

##27 November 2011 - Solr 3.5.0 Available

The Lucene PMC is pleased to announce the availability
of Apache Solr 3.5.0.

Solr can be downloaded from <a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/">http://www.apache.org/dyn/closer.cgi/lucene/solr/</a>

Highlights of the Solr release include:

- Bug fixes and improvements from Apache Lucene 3.5.0, including a
    very substantial (3-5X) RAM reduction required to hold the terms
    index on opening an <code  class="inline">IndexReader</code>.
    (<a href="https://issues.apache.org/jira/browse/LUCENE-2205">LUCENE-2205</a>)

- Added support for distributed result grouping.
    (<a href="https://issues.apache.org/jira/browse/SOLR-2066">SOLR-2066</a>,
    <a href="https://issues.apache.org/jira/browse/SOLR-2776">SOLR-2776</a>)

- Added support for Hunspell stemmer <code  class="inline">TokenFilter</code> supporting
    stemming for 99 languages.
    (<a href="https://issues.apache.org/jira/browse/SOLR-2769">SOLR-2769</a>)

- A new contrib module "langid" adds language identification
    capabilities as an Update Processor, using Tika's
    <code  class="inline">LanguageIdentifier</code> or Cybozu language-detection library
    (<a href="https://issues.apache.org/jira/browse/SOLR-1979">SOLR-1979</a>)

- Numeric types including Trie and date types now support
    <code  class="inline">sortMissingFirst</code>/<code  class="inline">Last</code>.
    (<a href="https://issues.apache.org/jira/browse/SOLR-2881">SOLR-2881</a>)

- Added <code  class="inline">hl.q</code> parameter. It is optional and if it is specified,
    it overrides <code  class="inline">q</code> parameter in <code  class="inline">Highlighter</code>.
    (<a href="https://issues.apache.org/jira/browse/SOLR-1926">SOLR-1926</a>)

- Several minor bugfixes like date parsing for years from 0001-1000, ignored
    configurations when using <code  class="inline">QueryAnalyzer</code> with
    <code  class="inline">SpellCheckComponent</code> and many more.
    See CHANGES.txt entries for full details.



##26 October 2011 - Java 7u1 fixes index corruption and crash bugs in Apache Lucene Core and Apache Solr</title>
  Oracle released <a href="http://www.oracle.com/technetwork/java/javase/7u1-relnotes-507962.html">Java 7u1</a> on October 19.
  According to the release notes and tests done by the Lucene committers, all bugs reported on July 28 are fixed in this release,
  so code using Porter stemmer no longer crashes with <code  class="inline">SIGSEGV</code>. We were not able to experience any index corruption anymore,
  so it is safe to use Java 7u1 with Lucene Core and Solr.
  On the same day, Oracle released <a href="http://www.oracle.com/technetwork/java/javase/6u29-relnotes-507960.html">Java 6u29</a>
  fixing the same problems occurring with Java 6, if the JVM switches <code  class="inline">-XX:+AggressiveOpts</code>
  or <code  class="inline">-XX:+OptimizeStringConcat</code> were used. Of course, you should <strong>not</strong> use experimental JVM options like
  <code  class="inline">-XX:+AggressiveOpts</code> in production environments! We recommend everybody to upgrade to this latest version 6u29.
  In case you upgrade to Java 7, remember that you may have to reindex, as the unicode
  version shipped with Java 7 changed and tokenization behaves differently
  (e.g. lowercasing). For more information, read <code  class="inline">JRE_VERSION_MIGRATION.txt</code>
  in your distribution package!


##14 September 2011 - Lucene Core 3.4.0 and Solr 3.4.0 Available</title>
The Lucene PMC is pleased to announce the availability
 of Apache Solr 3.4.0.

Solr can be downloaded from <a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/">http://www.apache.org/dyn/closer.cgi/lucene/solr/</a>



Highlights of the Solr release include:

- SolrJ client can now parse grouped and range facets results
(<a href="https://issues.apache.org/jira/browse/SOLR-2523">SOLR-2523</a>).

- A new <code  class="inline">XsltUpdateRequestHandler</code> allows posting XML that's
transformed by a provided XSLT into a valid Solr document
(<a href="https://issues.apache.org/jira/browse/SOLR-2630">SOLR-2630</a>).

- Post-group faceting option (<code  class="inline">group.truncate</code>) can now compute
facet counts for only the highest ranking documents per-group.
(<a href="https://issues.apache.org/jira/browse/SOLR-2665">SOLR-2665</a>).

- Add <code  class="inline">commitWithin</code> update request parameter to all update handlers
that were previously missing it.  This tells Solr to commit the
change within the specified amount of time (<a href="https://issues.apache.org/jira/browse/SOLR-2540">SOLR-2540</a>).

- You can now specify <code  class="inline">NIOFSDirectory</code> (<a href="https://issues.apache.org/jira/browse/SOLR-2670">SOLR-2670</a>).

- New parameter <code  class="inline">hl.phraseLimit</code> speeds up <code  class="inline">FastVectorHighlighter</code>
(<a href="https://issues.apache.org/jira/browse/LUCENE-3234">LUCENE-3234</a>).

- The query cache and filter cache can now be disabled per request.
See <a href="http://wiki.apache.org/solr/CommonQueryParameters#Caching_of_filters">this wiki page</a>
(<a href="https://issues.apache.org/jira/browse/SOLR-2429">SOLR-2429</a>).

-  Improved memory usage, build time, and performance of
<code  class="inline">SynonymFilterFactory</code> (<a href="https://issues.apache.org/jira/browse/LUCENE-3233">LUCENE-3233</a>).

-  Added <code  class="inline">omitPositions</code> to the schema, so you can omit position
information while still indexing term frequencies (<a href="https://issues.apache.org/jira/browse/LUCENE-2048">LUCENE-2048</a>).

- Various fixes for multi-threaded <code  class="inline">DataImportHandler</code>.


##28 July 2011 - WARNING: Index corruption and crashes in Apache Lucene Core / Apache Solr with Java 7

Oracle released <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java 7</a> today.
Unfortunately it contains hotspot compiler optimizations, which miscompile some loops.
This can affect code of several Apache projects. Sometimes JVMs only crash, but in several cases,
results calculated can be incorrect, leading to bugs in applications
(see Hotspot bugs <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7070134">7070134</a>,
<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7044738">7044738</a>,
<a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7068051">7068051</a>).
<strong>Apache Lucene Core</strong> and <strong>Apache Solr</strong> are two Apache projects,
which are affected by these bugs, namely all versions released until today.
Solr users with the default configuration will have
Java crashing with <code  class="inline">SIGSEGV</code> as soon as they start to index documents, as one
affected part is the well-known Porter stemmer
(see <a href="https://issues.apache.org/jira/browse/LUCENE-3335">LUCENE-3335</a>).
Other loops in Lucene may be miscompiled, too, leading to index corruption
(especially on Lucene trunk with pulsing codec; other loops may be
affected, too - <a href="https://issues.apache.org/jira/browse/LUCENE-3346">LUCENE-3346</a>).
These problems were detected only 5 days before the official Java 7 release,
so Oracle had no time to fix those bugs, affecting also many more applications.
In response to our questions, they proposed to include the fixes into service
release u2 (eventually into service release u1, see
<a href="http://mail.openjdk.java.net/pipermail/hotspot-compiler-dev/2011-July/005971.html">this mail</a>).
<strong>This means you cannot use Apache Lucene/Solr with Java 7 releases before Update 2!</strong>
If you do, please don't open bug reports, it is not the committers' fault!
At least disable loop optimizations using the <code  class="inline">-XX:-UseLoopPredicate</code> JVM option
to not risk index corruptions.
<em>Please note:</em> Also Java 6 users are affected, if they use one of those
JVM options, which are <strong>not</strong> enabled by default: <code  class="inline">-XX:+OptimizeStringConcat</code>
or <code  class="inline">-XX:+AggressiveOpts</code>.
It is strongly recommended not to use any hotspot optimization switches in any Java
version without extensive testing!
In case you upgrade to Java 7, remember that you may have to reindex, as the unicode
version shipped with Java 7 changed and tokenization behaves differently
(e.g. lowercasing). For more information, read <code  class="inline">JRE_VERSION_MIGRATION.txt</code>
in your distribution package!

##1 July 2011 - Solr 3.3 Available

The Lucene PMC is pleased to announce the availability
of Apache Solr 3.3.

Solr can be downloaded from <a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/">http://www.apache.org/dyn/closer.cgi/lucene/solr/</a>

Highlights of the Solr release include:


   - Grouping / Field Collapsing
   - A new, automaton-based suggest/autocomplete implementation offering an
       order of magnitude smaller RAM consumption.
   - KStemFilterFactory, an optimized implementation of a less aggressive
       stemmer for English.
   - Solr defaults to a new, more efficient merge policy (TieredMergePolicy).
       See <a href="http://s.apache.org/merging">http://s.apache.org/merging</a> for more information.
   - Important bugfixes, including extremely high RAM usage in spellchecking.
   - Bugfixes and improvements from Apache Lucene 3.3


##4 June 2011 - Lucene Core 3.2 and Solr 3.2 Available
The Lucene PMC is pleased to announce the availability of Apache Solr 3.2.

Solr can be downloaded from <a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/">http://www.apache.org/dyn/closer.cgi/lucene/solr/</a>


Highlights of the Solr release include:


   - Ability to specify overwrite and commitWithin as request parameters when
       using the JSON update format.
   - TermQParserPlugin, useful when generating filter queries from terms
       returned from field faceting or the terms component.
   - DebugComponent now supports using a NamedList to model Explanation objects
       in its responses instead of Explanation.toString.
   - Improvements to the UIMA and Carrot2 integrations.
   - Highlighting performance improvements.
   - A test-framework jar for easy testing of Solr extensions.
   - Bugfixes and improvements from Apache Lucene 3.2.


##31 March 2011 - Solr 3.1 Available
The Lucene PMC is pleased to announce the availability of Apache Solr 3.1.
The version number for Solr 3.1 was chosen to reflect the merge of
development with Lucene, which is currently also on 3.1.  Going
forward, we expect the Solr version to be the same as the Lucene
version.  Solr 3.1 contains Lucene 3.1 and is the release after Solr 1.4.1.

Solr can be downloaded from <a href="http://www.apache.org/dyn/closer.cgi/lucene/solr/">http://www.apache.org/dyn/closer.cgi/lucene/solr/</a>

Highlights of the Solr release include:

- Numeric range facets (similar to date faceting).
- New spatial search, including spatial filtering, boosting and sorting capabilities.
- Example Velocity driven search UI at http://localhost:8983/solr/browse
- A new termvector-based highlighter
- Extend dismax (edismax) query parser which addresses some
missing features in the dismax query parser along with some
extensions.
- Several more components now support distributed mode:
TermsComponent, SpellCheckComponent.
- A new Auto Suggest component.
- Ability to sort by functions.
- JSON document indexing.
- CSV response format.
- Apache UIMA integration for metadata extraction.
- Leverages Lucene 3.1 and it's inherent optimizations and bug fixes
as well as new analysis capabilities.
- Numerous improvements, bug fixes, and optimizations.



