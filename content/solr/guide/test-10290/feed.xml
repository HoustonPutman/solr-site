<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Apache Solr Reference Guide</title>
        <description>The Apache Solr Reference Guide is the official documentation for the Apache Solr project.</description>
        <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full</link>
        <atom:link href="https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Wed, 26 Apr 2017 21:20:02 -0500</pubDate>
        <lastBuildDate>Wed, 26 Apr 2017 21:20:02 -0500</lastBuildDate>
        <generator>Jekyll v3.3.1</generator>
        
        <item>
            <title>Page Not Found</title>
            <description>&lt;p&gt;Sorry, but the page you were trying to view does not exist. Try searching for it or looking at the URL to see if it looks correct.&lt;/p&gt;
</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/404.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/404.html</guid>
            
        </item>
        
        <item>
            <title>A Quick Overview</title>
            <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having had some fun with Solr, you will now learn about all the cool things it can do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a example of how Solr might be integrated into an application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;images/a-quick-overview/sample-client-app-arch.png&quot; alt=&quot;image&quot; width=&quot;500&quot; height=&quot;379&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;In the scenario above, Solr runs along side other server applications. For example, an online store application would provide a user interface, a shopping cart, and a way to make purchases for end users; while an inventory management application would allow store employees to edit product information. The product metadata would be kept in some kind of database, as well as in Solr.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Solr makes it easy to add the capability to search through the online store through the following steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Define a &lt;em&gt;schema&lt;/em&gt;. The schema tells Solr about the contents of documents it will be indexing. In the online store example, the schema would define fields for the product name, description, price, manufacturer, and so on. Solr&amp;#8217;s schema is powerful and flexible and allows you to tailor Solr&amp;#8217;s behavior to your application. See &lt;a href=&quot;documents-fields-and-schema-design.html#documents-fields-and-schema-design&quot;&gt;Documents, Fields, and Schema Design&lt;/a&gt; for all the details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy Solr.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feed Solr documents for which your users will search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expose search functionality in your application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because Solr is based on open standards, it is highly extensible. Solr queries are RESTful, which means, in essence, that a query is a simple HTTP request URL and the response is a structured document: mainly XML, but it could also be JSON, CSV, or some other format. This means that a wide variety of clients will be able to use Solr, from other web applications to browser clients, rich client applications, and mobile devices. Any platform capable of HTTP can talk to Solr. See &lt;a href=&quot;client-apis.html#client-apis&quot;&gt;Client APIs&lt;/a&gt; for details on client APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Solr is based on the Apache Lucene project, a high-performance, full-featured search engine. Solr offers support for the simplest keyword searching through to complex queries on multiple fields and faceted search results. &lt;a href=&quot;searching.html#searching&quot;&gt;Searching&lt;/a&gt; has more information about searching and queries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If Solr&amp;#8217;s capabilities are not impressive enough, its ability to handle very high-volume applications should do the trick.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A relatively common scenario is that you have so much data, or so many queries, that a single Solr server is unable to handle your entire workload. In this case, you can scale up the capabilities of your application using &lt;a href=&quot;solrcloud.html#solrcloud&quot;&gt;SolrCloud&lt;/a&gt; to better distribute the data, and the processing of requests, across many servers. Multiple options can be mixed and matched depending on the type of scalability you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example: &quot;Sharding&quot; is a scaling technique in which a collection is split into multiple logical pieces called &quot;shards&quot; in order to scale up the number of documents in a collection beyond what could physically fit on a single server. Incoming queries are distributed to every shard in the collection, which respond with merged results. Another technique available is to increase the &quot;Replication Factor&quot; of your collection, which allows you to add servers with additional copies of your collection to handle higher concurrent query load by spreading the requests around to multiple machines. Sharding and Replication are not mutually exclusive, and together make Solr an extremely powerful and scalable platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Best of all, this talk about high-volume applications is not just hypothetical: some of the famous Internet sites that use Solr today are Macy&amp;#8217;s, EBay, and Zappo&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, take a look at &lt;a href=&quot;https://wiki.apache.org/solr/PublicServers&quot; class=&quot;bare&quot;&gt;https://wiki.apache.org/solr/PublicServers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/a-quick-overview.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/a-quick-overview.html</guid>
            
        </item>
        
        <item>
            <title>A Step Closer</title>
            <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You already have some idea of Solr&amp;#8217;s schema. This section describes Solr&amp;#8217;s home directory and other configuration options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When Solr runs in an application server, it needs access to a home directory. The home directory contains important configuration information and is the place where Solr will store its index. The layout of the home directory will look a little different when you are running Solr in standalone mode vs when you are running in SolrCloud mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The crucial parts of the Solr home directory are shown in these examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Standalone Mode&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt;solr&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;home&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;directory&lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;/&lt;/span&gt;
   solr&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;xml&lt;/span&gt;
   core_name1&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;
      core&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;properties&lt;/span&gt;
      conf&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;
         solrconfig&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;xml&lt;/span&gt;
         managed&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;schema
      data&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;
   core_name2&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;
      core&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;properties&lt;/span&gt;
      conf&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;
         solrconfig&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;xml&lt;/span&gt;
         managed&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;schema
      data&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;SolrCloud Mode&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt;solr&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;home&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;directory&lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;/&lt;/span&gt;
   solr&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;xml&lt;/span&gt;
   core_name1&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;
      core&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;properties&lt;/span&gt;
      data&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;
   core_name2&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;
      core&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;properties&lt;/span&gt;
      data&lt;span style=&quot;color: #666666&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may see other files, but the main ones you need to know are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;solr.xml&lt;/code&gt; specifies configuration options for your Solr server instance. For more information on &lt;code&gt;solr.xml&lt;/code&gt; see &lt;a href=&quot;solr-cores-and-solr-xml.html#solr-cores-and-solr-xml&quot;&gt;Solr Cores and solr.xml&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Per Solr Core:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;core.properties&lt;/code&gt; defines specific properties for each core such as its name, the collection the core belongs to, the location of the schema, and other parameters. For more details on &lt;code&gt;core.properties&lt;/code&gt;, see the section &lt;a href=&quot;defining-core-properties.html#defining-core-properties&quot;&gt;Defining core.properties&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;solrconfig.xml&lt;/code&gt; controls high-level behavior. You can, for example, specify an alternate location for the data directory. For more information on &lt;code&gt;solrconfig.xml&lt;/code&gt;, see &lt;a href=&quot;configuring-solrconfig-xml.html#configuring-solrconfig-xml&quot;&gt;Configuring solrconfig.xml&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;managed-schema&lt;/code&gt; (or &lt;code&gt;schema.xml&lt;/code&gt; instead) describes the documents you will ask Solr to index. The Schema define a document as a collection of fields. You get to define both the field types and the fields themselves. Field type definitions are powerful and include information about how Solr processes incoming field values and query values. For more information on Solr Schemas, see &lt;a href=&quot;documents-fields-and-schema-design.html#documents-fields-and-schema-design&quot;&gt;Documents, Fields, and Schema Design&lt;/a&gt; and the &lt;a href=&quot;schema-api.html#schema-api&quot;&gt;Schema API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data/&lt;/code&gt; The directory containing the low level index files.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the SolrCloud example does not include a &lt;code&gt;conf&lt;/code&gt; directory for each Solr Core (so there is no &lt;code&gt;solrconfig.xml&lt;/code&gt; or Schema file). This is because the configuration files usually found in the &lt;code&gt;conf&lt;/code&gt; directory are stored in ZooKeeper so they can be propagated across the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using SolrCloud with the embedded ZooKeeper instance, you may also see &lt;code&gt;zoo.cfg&lt;/code&gt; and `zoo.data `which are ZooKeeper configuration and data files. However, if you are running your own ZooKeeper ensemble, you would supply your own ZooKeeper configuration file when you start it and the copies in Solr would be unused. For more information about ZooKeeper and SolrCloud, see the section &lt;a href=&quot;solrcloud.html#solrcloud&quot;&gt;SolrCloud&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/a-step-closer.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/a-step-closer.html</guid>
            
        </item>
        
        <item>
            <title>About Filters</title>
            <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like &lt;a href=&quot;tokenizers.html#tokenizers&quot;&gt;tokenizers&lt;/a&gt;, &lt;a href=&quot;filter-descriptions.html#filter-descriptions&quot;&gt;filters&lt;/a&gt; consume input and produce a stream of tokens. Filters also derive from &lt;code&gt;org.apache.lucene.analysis.TokenStream&lt;/code&gt;. Unlike tokenizers, a filter&amp;#8217;s input is another TokenStream. The job of a filter is usually easier than that of a tokenizer since in most cases a filter looks at each token in the stream sequentially and decides whether to pass it along, replace it or discard it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A filter may also do more complex analysis by looking ahead to consider multiple tokens at once, although this is less common. One hypothetical use for such a filter might be to normalize state names that would be tokenized as two words. For example, the single token &quot;california&quot; would be replaced with &quot;CA&quot;, while the token pair &quot;rhode&quot; followed by &quot;island&quot; would become the single token &quot;RI&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because filters consume one &lt;code&gt;TokenStream&lt;/code&gt; and produce a new &lt;code&gt;TokenStream&lt;/code&gt;, they can be chained one after another indefinitely. Each filter in the chain in turn processes the tokens produced by its predecessor. The order in which you specify the filters is therefore significant. Typically, the most general filtering is done first, and later filtering stages are more specialized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;fieldType&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.TextField&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardTokenizerFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.LowerCaseFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.EnglishPorterFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This example starts with Solr&amp;#8217;s standard tokenizer, which breaks the field&amp;#8217;s text into tokens. Those tokens then pass through Solr&amp;#8217;s standard filter, which removes dots from acronyms, and performs a few other common operations. All the tokens are then set to lowercase, which will facilitate case-insensitive matching at query time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last filter in the above example is a stemmer filter that uses the Porter stemming algorithm. A stemmer is basically a set of mapping rules that maps the various forms of a word back to the base, or &lt;em&gt;stem&lt;/em&gt;, word from which they derive. For example, in English the words &quot;hugs&quot;, &quot;hugging&quot; and &quot;hugged&quot; are all forms of the stem word &quot;hug&quot;. The stemmer will replace all of these terms with &quot;hug&quot;, which is what will be indexed. This means that a query for &quot;hug&quot; will match the term &quot;hugged&quot;, but not &quot;huge&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conversely, applying a stemmer to your query terms will allow queries containing non stem terms, like &quot;hugging&quot;, to match documents with different variations of the same stem word, such as &quot;hugged&quot;. This works because both the indexer and the query will map to the same stem (&quot;hug&quot;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Word stemming is, obviously, very language specific. Solr includes several language-specific stemmers created by the &lt;a href=&quot;http://snowball.tartarus.org/&quot;&gt;Snowball&lt;/a&gt; generator that are based on the Porter stemming algorithm. The generic Snowball Porter Stemmer Filter can be used to configure any of these language stemmers. Solr also includes a convenience wrapper for the English Snowball stemmer. There are also several purpose-built stemmers for non-English languages. These stemmers are described in &lt;a href=&quot;language-analysis.html#language-analysis&quot;&gt;Language Analysis&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/about-filters.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/about-filters.html</guid>
            
        </item>
        
        <item>
            <title>About This Guide</title>
            <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This guide describes all of the important features and functions of Apache Solr. It is free to download from &lt;a href=&quot;http://lucene.apache.org/solr/&quot; class=&quot;bare&quot;&gt;http://lucene.apache.org/solr/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Designed to provide high-level documentation, this guide is intended to be more encyclopedic and less of a cookbook. It is structured to address a broad spectrum of needs, ranging from new developers getting started to well-experienced developers extending their application or troubleshooting. It will be of use at any point in the application life cycle, for whenever you need authoritative information about Solr.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The material as presented assumes that you are familiar with some basic search concepts and that you can read XML. It does not assume that you are a Java programmer, although knowledge of Java is helpful when working directly with Lucene or when developing custom extensions to a Lucene/Solr installation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AboutThisGuide-SpecialInlineNotes&quot;&gt;Special Inline Notes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Special notes are included throughout these pages.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Note Type&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Look &amp;amp; Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Information&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notes with a blue background are used for information that is important for you to know.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yellow notes are further clarifications of important points to keep in mind while using Solr.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notes with a green background are Helpful Tips.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notes with a red background are warning messages.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AboutThisGuide-HostsandPortExamples&quot;&gt;Hosts and Port Examples&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default port when running Solr is 8983. The samples, URLs and screenshots in this guide may show different ports, because the port number that Solr uses is configurable. If you have not customized your installation of Solr, please make sure that you use port 8983 when following the examples, or configure your own installation to use the port numbers shown in the examples. For information about configuring port numbers, see &lt;a href=&quot;managing-solr.html#managing-solr&quot;&gt;Managing Solr&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, URL examples use 'localhost' throughout; if you are accessing Solr from a location remote to the server hosting Solr, replace 'localhost' with the proper domain or IP where Solr is running.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AboutThisGuide-Paths&quot;&gt;Paths&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Path information is given relative to &lt;code&gt;solr.home&lt;/code&gt;, which is the location under the main Solr installation where Solr&amp;#8217;s collections and their &lt;code&gt;conf&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; directories are stored. When running the various examples mentioned through out this tutorial (i.e., &lt;code&gt;bin/solr -e techproducts&lt;/code&gt;) the &lt;code&gt;solr.home&lt;/code&gt; will be a sub directory of &lt;code&gt;example/&lt;/code&gt; created for you automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/about-this-guide.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/about-this-guide.html</guid>
            
        </item>
        
        <item>
            <title>About Tokenizers</title>
            <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The job of a &lt;a href=&quot;tokenizers.html#tokenizers&quot;&gt;tokenizer&lt;/a&gt; is to break up a stream of text into tokens, where each token is (usually) a sub-sequence of the characters in the text. An analyzer is aware of the field it is configured for, but a tokenizer is not. Tokenizers read from a character stream (a Reader) and produce a sequence of Token objects (a TokenStream).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Characters in the input stream may be discarded, such as whitespace or other delimiters. They may also be added to or replaced, such as mapping aliases or abbreviations to normalized forms. A token contains various metadata in addition to its text value, such as the location at which the token occurs in the field. Because a tokenizer may produce tokens that diverge from the input text, you should not assume that the text of the token is the same text that occurs in the field, or that its length is the same as the original text. It&amp;#8217;s also possible for more than one token to have the same position or refer to the same offset in the original text. Keep this in mind if you use token metadata for things like highlighting search results in the field text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;fieldType&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.TextField&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardTokenizerFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class named in the tokenizer element is not the actual tokenizer, but rather a class that implements the &lt;code&gt;TokenizerFactory&lt;/code&gt; API. This factory class will be called upon to create new tokenizer instances as needed. Objects created by the factory must derive from &lt;code&gt;Tokenizer&lt;/code&gt;, which indicates that they produce sequences of tokens. If the tokenizer produces tokens that are usable as is, it may be the only component of the analyzer. Otherwise, the tokenizer&amp;#8217;s output tokens will serve as input to the first filter stage in the pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;TypeTokenFilterFactory&lt;/code&gt; is available that creates a &lt;code&gt;TypeTokenFilter&lt;/code&gt; that filters tokens based on their TypeAttribute, which is set in &lt;code&gt;factory.getStopTypes&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a complete list of the available TokenFilters, see the section &lt;a href=&quot;tokenizers.html#tokenizers&quot;&gt;Tokenizers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;AboutTokenizers-WhenTouseaCharFiltervs.aTokenFilter&quot;&gt;When To use a CharFilter vs. a TokenFilter&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several pairs of CharFilters and TokenFilters that have related (ie: &lt;code&gt;MappingCharFilter&lt;/code&gt; and &lt;code&gt;ASCIIFoldingFilter&lt;/code&gt;) or nearly identical (ie: &lt;code&gt;PatternReplaceCharFilterFactory&lt;/code&gt; and &lt;code&gt;PatternReplaceFilterFactory&lt;/code&gt;) functionality and it may not always be obvious which is the best choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The decision about which to use depends largely on which Tokenizer you are using, and whether you need to preprocess the stream of characters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, suppose you have a tokenizer such as &lt;code&gt;StandardTokenizer&lt;/code&gt; and although you are pretty happy with how it works overall, you want to customize how some specific characters behave. You could modify the rules and re-build your own tokenizer with JFlex, but it might be easier to simply map some of the characters before tokenization with a &lt;code&gt;CharFilter&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/about-tokenizers.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/about-tokenizers.html</guid>
            
        </item>
        
        <item>
            <title>Adding Custom Plugins in SolrCloud Mode</title>
            <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When running Solr in SolrCloud mode and you want to use custom code (such as custom analyzers, tokenizers, query parsers, and other plugins), it can be cumbersome to add jars to the classpath on all nodes in your cluster. Using the &lt;a href=&quot;blob-store-api.html#blob-store-api&quot;&gt;Blob Store API&lt;/a&gt; and special commands with the &lt;a href=&quot;config-api.html#config-api&quot;&gt;Config API&lt;/a&gt;, you can upload jars to a special system-level collection and dynamically load plugins from them at runtime with out needing to restart any nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;This Feature is Disabled By Default&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to requiring that Solr by running in &lt;a href=&quot;solrcloud.html#solrcloud&quot;&gt;SolrCloud&lt;/a&gt; mode, this feature is also disabled by default unless all Solr nodes are run with the &lt;code&gt;-Denable.runtime.lib=true&lt;/code&gt; option on startup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before enabling this feature, users should carefully consider the issues discussed in the &lt;a href=&quot;#AddingCustomPluginsinSolrCloudMode-SecuringRuntimeLibraries&quot;&gt;Securing Runtime Libraries&lt;/a&gt; section below.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;AddingCustomPluginsinSolrCloudMode-UploadingJarFiles&quot;&gt;Uploading Jar Files&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is to use the &lt;a href=&quot;blob-store-api.html#blob-store-api&quot;&gt;Blob Store API&lt;/a&gt; to upload your jar files. This will to put your jars in the &lt;code&gt;.system&lt;/code&gt; collection and distribute them across your SolrCloud nodes. These jars are added to a separate classloader and only accessible to components that are configured with the property &lt;code&gt;runtimeLib=true&lt;/code&gt;. These components are loaded lazily because the &lt;code&gt;.system&lt;/code&gt; collection may not be loaded when a particular core is loaded.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;AddingCustomPluginsinSolrCloudMode-ConfigAPICommandstouseJarsasRuntimeLibraries&quot;&gt;Config API Commands to use Jars as Runtime Libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The runtime library feature uses a special set of commands for the &lt;a href=&quot;config-api.html#config-api&quot;&gt;Config API&lt;/a&gt; to add, update, or remove jar files currently available in the blob store to the list of runtime libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following commands are used to manage runtime libs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;add-runtimelib&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;update-runtimelib&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;delete-runtimelib&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;curl http://localhost:8983/solr/techproducts/config -H &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;Content-type:application/json&amp;#39;&lt;/span&gt; -d &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;{&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;   &amp;quot;add-runtimelib&amp;quot;: { &amp;quot;name&amp;quot;:&amp;quot;jarblobname&amp;quot;, &amp;quot;version&amp;quot;:2 },&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;   &amp;quot;update-runtimelib&amp;quot;: { &amp;quot;name&amp;quot;:&amp;quot;jarblobname&amp;quot;, &amp;quot;version&amp;quot;:3 },&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;   &amp;quot;delete-runtimelib&amp;quot;: &amp;quot;jarblobname&amp;quot;&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The name to use is the name of the blob that you specified when you uploaded your jar to the blob store. You should also include the version of the jar found in the blob store that you want to use. These details are added to &lt;code&gt;configoverlay.json&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default &lt;code&gt;SolrResourceLoader&lt;/code&gt; does not have visibility to the jars that have been defined as runtime libraries. There is a classloader that can access these jars which is made available only to those components which are specially annotated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every pluggable component can have an optional extra attribute called &lt;code&gt;runtimeLib=true&lt;/code&gt;, which means that the components are not loaded at core load time. Instead, they will be loaded on demand. If all the dependent jars are not available when the component is loaded, an error is thrown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This example shows creating a ValueSourceParser using a jar that has been loaded to the Blob store.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;curl http://localhost:8983/solr/techproducts/config -H &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;Content-type:application/json&amp;#39;&lt;/span&gt; -d &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;{&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;  &amp;quot;create-valuesourceparser&amp;quot;: {&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;    &amp;quot;name&amp;quot;: &amp;quot;nvl&amp;quot;,&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;    &amp;quot;runtimeLib&amp;quot;: true,&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;    &amp;quot;class&amp;quot;: &amp;quot;solr.org.apache.solr.search.function.NvlValueSourceParser,&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;    &amp;quot;nvlFloatValue&amp;quot;: 0.0 }&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;AddingCustomPluginsinSolrCloudMode-SecuringRuntimeLibraries&quot;&gt;Securing Runtime Libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A drawback of this feature is that it could be used to load malicious executable code into the system. However, it is possible to restrict the system to load only trusted jars using &lt;a href=&quot;http://en.wikipedia.org/wiki/Public_key_infrastructure&quot;&gt;PKI&lt;/a&gt; to verify that the executables loaded into the system are trustworthy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following steps will allow you enable security for this feature. The instructions assume you have started all your Solr nodes with the &lt;code&gt;-Denable.runtime.lib=true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AddingCustomPluginsinSolrCloudMode-Step1_GenerateanRSAPrivateKey&quot;&gt;Step 1: Generate an RSA Private Key&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is to generate an RSA private key. The example below uses a 512-bit key, but you should use the strength appropriate to your needs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ openssl genrsa -out priv_key.pem &lt;span style=&quot;color: #666666&quot;&gt;512&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AddingCustomPluginsinSolrCloudMode-Step2_OutputthePublicKey&quot;&gt;Step 2: Output the Public Key&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The public portion of the key should be output in DER format so Java can read it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ openssl rsa -in priv_key.pem -pubout -outform DER -out pub_key.der&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AddingCustomPluginsinSolrCloudMode-Step3_LoadtheKeytoZooKeeper&quot;&gt;Step 3: Load the Key to ZooKeeper&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The .der files that are output from Step 2 should then be loaded to ZooKeeper under a node &lt;code&gt;/keys/exe&lt;/code&gt; so they are available throughout every node. You can load any number of public keys to that node and all are valid. If a key is removed from the directory, the signatures of that key will cease to be valid. So, before removing the a key, make sure to update your runtime library configurations with valid signatures with the &lt;code&gt;update-runtimelib&lt;/code&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the current time, you can only use the ZooKeeper &lt;code&gt;zkCli.sh&lt;/code&gt; (or &lt;code&gt;zkCli.cmd&lt;/code&gt; on Windows) script to issue these commands (the Solr version has the same name, but is not the same). If you are running the embedded ZooKeeper that is included with Solr, you &lt;strong&gt;do not&lt;/strong&gt; have this script already; in order to use it, you will need to download a copy of ZooKeeper v3.4.6 from &lt;a href=&quot;http://zookeeper.apache.org/&quot; class=&quot;bare&quot;&gt;http://zookeeper.apache.org/&lt;/a&gt;. Don&amp;#8217;t worry about configuring the download, you&amp;#8217;re just trying to get the command line utility script. When you start the script, you will connect to the embedded ZooKeeper. If you have your own ZooKeeper ensemble running already, you can find the script in &lt;code&gt;$ZK_INSTALL/bin/zkCli.sh&lt;/code&gt; (or &lt;code&gt;zkCli.cmd&lt;/code&gt; if you are using Windows).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To load the keys, you will need to connect to ZooKeeper with &lt;code&gt;zkCli.sh&lt;/code&gt;, create the directories, and then create the key file, as in the following example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Connect to ZooKeeper&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Replace the server location below with the correct ZooKeeper connect string for your installation.&lt;/span&gt;
$ .bin/zkCli.sh -server localhost:9983

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# After connection, you will interact with the ZK prompt.&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Create the directories&lt;/span&gt;
&lt;span style=&quot;color: #666666&quot;&gt;[&lt;/span&gt;zk: localhost:9983&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;CONNECTED&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;5]&lt;/span&gt; create /keys
&lt;span style=&quot;color: #666666&quot;&gt;[&lt;/span&gt;zk: localhost:9983&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;CONNECTED&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;5]&lt;/span&gt; create /keys/exe

&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Now create the public key file in ZooKeeper&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# The second path is the path to the .der file on your local machine&lt;/span&gt;
&lt;span style=&quot;color: #666666&quot;&gt;[&lt;/span&gt;zk: localhost:9983&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;CONNECTED&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;5]&lt;/span&gt; create /keys/exe/pub_key.der /myLocal/pathTo/pub_key.der&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After this, any attempt to load a jar will fail. All your jars must be signed with one of your private keys for Solr to trust it. The process to sign your jars and use the signature is outlined in Steps 4-6.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AddingCustomPluginsinSolrCloudMode-Step4_SignthejarFile&quot;&gt;Step 4: Sign the jar File&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next you need to sign the sha1 digest of your jar file and get the base64 string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ openssl dgst -sha1 -sign priv_key.pem myjar.jar | openssl enc -base64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output of this step will be a string that you will need to add the jar to your classpath in Step 6 below.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AddingCustomPluginsinSolrCloudMode-Step5_LoadthejartotheBlobStore&quot;&gt;Step 5: Load the jar to the Blob Store&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Load your jar to the Blob store, using the &lt;a href=&quot;blob-store-api.html#blob-store-api&quot;&gt;Blob Store API&lt;/a&gt;. This step does not require a signature; you will need the signature in Step 6 to add it to your classpath.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;curl -X POST -H &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;Content-Type: application/octet-stream&amp;#39;&lt;/span&gt; --data-binary @&lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;filename&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;
http://localhost:8983/solr/.system/blob/&lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;blobname&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The blob name that you give the jar file in this step will be used as the name in the next step.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;AddingCustomPluginsinSolrCloudMode-Step6_AddthejartotheClasspath&quot;&gt;Step 6: Add the jar to the Classpath&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, add the jar to the classpath using the Config API as detailed above. In this step, you will need to provide the signature of the jar that you got in Step 4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;curl http://localhost:8983/solr/techproducts/config -H &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;Content-type:application/json&amp;#39;&lt;/span&gt;  -d &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;{&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;  &amp;quot;add-runtimelib&amp;quot;: {&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;    &amp;quot;name&amp;quot;:&amp;quot;blobname&amp;quot;,&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;    &amp;quot;version&amp;quot;:2,&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;    &amp;quot;sig&amp;quot;:&amp;quot;mW1Gwtz2QazjfVdrLFHfbGwcr8xzFYgUOLu68LHqWRDvLG0uLcy1McQ+AzVmeZFBf1yLPDEHBWJb5KXr8bdbHN/&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;           PYgUB1nsr9pk4EFyD9KfJ8TqeH/ijQ9waa/vjqyiKEI9U550EtSzruLVZ32wJ7smvV0fj2YYhrUaaPzOn9g0=&amp;quot; }&lt;/span&gt;
&lt;span style=&quot;color: #BA2121&quot;&gt;}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/adding-custom-plugins-in-solrcloud-mode.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/adding-custom-plugins-in-solrcloud-mode.html</guid>
            
        </item>
        
        <item>
            <title>Analysis Screen</title>
            <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Analysis screen lets you inspect how data will be handled according to the field, field type and dynamic field configurations found in your Schema. You can analyze how content would be handled during indexing or during query processing and view the results separately or at the same time. Ideally, you would want content to be handled consistently, and this screen allows you to validate the settings in the field type or field analysis chains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enter content in one or both boxes at the top of the screen, and then choose the field or field type definitions to use for analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;images/analysis-screen/analysis_normal.png&quot; alt=&quot;image&quot; height=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you click the &lt;strong&gt;Verbose Output&lt;/strong&gt; check box, you see more information, including more details on the transformations to the input (such as, convert to lower case, strip extra characters, etc.) including the raw bytes, type and detailed position information at each stage. The information displayed will vary depending on the settings of the field or field type. Each step of the process is displayed in a separate section, with an abbreviation for the tokenizer or filter that is applied in that step. Hover or click on the abbreviation, and you&amp;#8217;ll see the name and path of the tokenizer or filter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;images/analysis-screen/analysis_verbose.png&quot; alt=&quot;image&quot; height=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example screenshot above, several transformations are applied to the input &quot;Running is a sport.&quot; The words &quot;is&quot; and &quot;a&quot; have been removed and the word &quot;running&quot; has been changed to its basic form, &quot;run&quot;. This is because we are using the field type &lt;code&gt;text_en&lt;/code&gt; in this scenario, which is configured to remove stop words (small words that usually do not provide a great deal of context) and &quot;stem&quot; terms when possible to find more possible matches (this is particularly helpful with plural forms of words). If you click the question mark next to the &lt;strong&gt;Analyze Fieldname/Field Type&lt;/strong&gt; pull-down menu, the &lt;a href=&quot;schema-browser-screen.html#schema-browser-screen&quot;&gt;Schema Browser window&lt;/a&gt; will open, showing you the settings for the field specified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The section &lt;a href=&quot;understanding-analyzers-tokenizers-and-filters.html#understanding-analyzers-tokenizers-and-filters&quot;&gt;Understanding Analyzers, Tokenizers, and Filters&lt;/a&gt; describes in detail what each option is and how it may transform your data and the section &lt;a href=&quot;running-your-analyzer.html#running-your-analyzer&quot;&gt;Running Your Analyzer&lt;/a&gt; has specific examples for using the Analysis screen.&lt;/p&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/analysis-screen.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/analysis-screen.html</guid>
            
        </item>
        
        <item>
            <title>Analyzers</title>
            <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An analyzer examines the text of fields and generates a token stream. Analyzers are specified as a child of the &lt;code&gt;&amp;lt;fieldType&amp;gt;&lt;/code&gt; element in the &lt;code&gt;schema.xml&lt;/code&gt; configuration file (in the same &lt;code&gt;conf/&lt;/code&gt; directory as &lt;code&gt;solrconfig.xml&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In normal usage, only fields of type &lt;code&gt;solr.TextField&lt;/code&gt; will specify an analyzer. The simplest way to configure an analyzer is with a single &lt;code&gt;&amp;lt;analyzer&amp;gt;&lt;/code&gt; element whose class attribute is a fully qualified Java class name. The named class must derive from &lt;code&gt;org.apache.lucene.analysis.Analyzer&lt;/code&gt;. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;fieldType&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;nametext&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.TextField&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;org.apache.lucene.analysis.core.WhitespaceAnalyzer&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case a single class, &lt;code&gt;WhitespaceAnalyzer&lt;/code&gt;, is responsible for analyzing the content of the named text field and emitting the corresponding tokens. For simple cases, such as plain English prose, a single analyzer class like this may be sufficient. But it&amp;#8217;s often necessary to do more complex analysis of the field content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even the most complex analysis requirements can usually be decomposed into a series of discrete, relatively simple processing steps. As you will soon discover, the Solr distribution comes with a large selection of tokenizers and filters that covers most scenarios you are likely to encounter. Setting up an analyzer chain is very straightforward; you specify a simple &lt;code&gt;&amp;lt;analyzer&amp;gt;&lt;/code&gt; element (no class attribute) with child elements that name factory classes for the tokenizer and filters to use, in the order you want them to run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;fieldType&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;nametext&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.TextField&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardTokenizerFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.LowerCaseFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StopFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.EnglishPorterFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that classes in the &lt;code&gt;org.apache.solr.analysis&lt;/code&gt; package may be referred to here with the shorthand &lt;code&gt;solr.&lt;/code&gt; prefix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, no Analyzer class was specified on the &lt;code&gt;&amp;lt;analyzer&amp;gt;&lt;/code&gt; element. Rather, a sequence of more specialized classes are wired together and collectively act as the Analyzer for the field. The text of the field is passed to the first item in the list (&lt;code&gt;solr.StandardTokenizerFactory&lt;/code&gt;), and the tokens that emerge from the last one (&lt;code&gt;solr.EnglishPorterFilterFactory&lt;/code&gt;) are the terms that are used for indexing or querying any fields that use the &quot;nametext&quot; &lt;code&gt;fieldType&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Field Values versus Indexed Terms&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output of an Analyzer affects the &lt;em&gt;terms&lt;/em&gt; indexed in a given field (and the terms used when parsing queries against those fields) but it has no impact on the &lt;em&gt;stored&lt;/em&gt; value for the fields. For example: an analyzer might split &quot;Brown Cow&quot; into two indexed terms &quot;brown&quot; and &quot;cow&quot;, but the stored value will still be a single String: &quot;Brown Cow&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;Analyzers-AnalysisPhases&quot;&gt;Analysis Phases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Analysis takes place in two contexts. At index time, when a field is being created, the token stream that results from analysis is added to an index and defines the set of terms (including positions, sizes, and so on) for the field. At query time, the values being searched for are analyzed and the terms that result are matched against those that are stored in the field&amp;#8217;s index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many cases, the same analysis should be applied to both phases. This is desirable when you want to query for exact string matches, possibly with case-insensitivity, for example. In other cases, you may want to apply slightly different analysis steps during indexing than those used at query time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you provide a simple &lt;code&gt;&amp;lt;analyzer&amp;gt;&lt;/code&gt; definition for a field type, as in the examples above, then it will be used for both indexing and queries. If you want distinct analyzers for each phase, you may include two &lt;code&gt;&amp;lt;analyzer&amp;gt;&lt;/code&gt; definitions distinguished with a type attribute. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;fieldType&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;nametext&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.TextField&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;type=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardTokenizerFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.LowerCaseFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.KeepWordFilterFactory&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;words=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;keepwords.txt&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.SynonymFilterFactory&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;synonyms=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;syns.txt&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;type=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardTokenizerFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.LowerCaseFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this theoretical example, at index time the text is tokenized, the tokens are set to lowercase, any that are not listed in &lt;code&gt;keepwords.txt&lt;/code&gt; are discarded and those that remain are mapped to alternate values as defined by the synonym rules in the file &lt;code&gt;syns.txt&lt;/code&gt;. This essentially builds an index from a restricted set of possible values and then normalizes them to values that may not even occur in the original text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At query time, the only normalization that happens is to convert the query terms to lowercase. The filtering and mapping steps that occur at index time are not applied to the query terms. Queries must then, in this example, be very precise, using only the normalized terms that were stored at index time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;Analyzers-AnalysisforMulti-TermExpansion&quot;&gt;Analysis for Multi-Term Expansion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some types of queries (ie: Prefix, Wildcard, Regex, etc&amp;#8230;&amp;#8203;) the input provided by the user is not natural language intended for Analysis. Things like Synonyms or Stop word filtering do not work in a logical way in these types of Queries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The analysis factories that &lt;em&gt;can&lt;/em&gt; work in these types of queries (such as Lowercasing, or Normalizing Factories) are known as &lt;a href=&quot;https://lucene.apache.org/core/7_0_0//analyzers-common/org/apache/lucene/analysis/util/MultiTermAwareComponent.html&quot;&gt;&lt;code&gt;MultiTermAwareComponents&lt;/code&gt;&lt;/a&gt;. When Solr needs to perform analysis for a query that results in Multi-Term expansion, only the &lt;code&gt;MultiTermAwareComponents&lt;/code&gt; used in the &lt;code&gt;query&lt;/code&gt; analyzer are used, Factory that is not Multi-Term aware will be skipped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For most use cases, this provides the best possible behavior, but if you wish for absolute control over the analysis performed on these types of queries, you may explicitly define a &lt;code&gt;multiterm&lt;/code&gt; analyzer to use, such as in the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;fieldType&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;nametext&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.TextField&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;type=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardTokenizerFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.LowerCaseFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.KeepWordFilterFactory&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;words=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;keepwords.txt&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.SynonymFilterFactory&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;synonyms=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;syns.txt&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;type=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.StandardTokenizerFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.LowerCaseFilterFactory&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;!-- No analysis at all when doing queries that involved Multi-Term expansion --&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;analyzer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;type=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;multiterm&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;tokenizer&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;class=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;solr.KeywordTokenizerFactory&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/analyzer&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;/fieldType&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/analyzers.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/analyzers.html</guid>
            
        </item>
        
        <item>
            <title>Apache Solr Reference Guide</title>
            <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This reference guide describes Apache Solr, the open source solution for search. You can download Apache Solr from the Solr website at &lt;a href=&quot;http://lucene.apache.org/solr/&quot; class=&quot;bare&quot;&gt;http://lucene.apache.org/solr/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Guide contains the following sections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;getting-started.html#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/strong&gt;: This section guides you through the installation and setup of Solr.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;using-the-solr-administration-user-interface.html#using-the-solr-administration-user-interface&quot;&gt;Using the Solr Administration User Interface&lt;/a&gt;&lt;/strong&gt;: This section introduces the Solr Web-based user interface. From your browser you can view configuration files, submit queries, view logfile settings and Java environment settings, and monitor and control distributed configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;documents-fields-and-schema-design.html#documents-fields-and-schema-design&quot;&gt;Documents, Fields, and Schema Design&lt;/a&gt;&lt;/strong&gt;: This section describes how Solr organizes its data for indexing. It explains how a Solr schema defines the fields and field types which Solr uses to organize data within the document files it indexes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;understanding-analyzers-tokenizers-and-filters.html#understanding-analyzers-tokenizers-and-filters&quot;&gt;Understanding Analyzers, Tokenizers, and Filters&lt;/a&gt;&lt;/strong&gt;: This section explains how Solr prepares text for indexing and searching. Analyzers parse text and produce a stream of tokens, lexical units used for indexing and searching. Tokenizers break field data down into tokens. Filters perform other transformational or selective work on token streams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;indexing-and-basic-data-operations.html#indexing-and-basic-data-operations&quot;&gt;Indexing and Basic Data Operations&lt;/a&gt;&lt;/strong&gt;: This section describes the indexing process and basic index operations, such as commit, optimize, and rollback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;searching.html#searching&quot;&gt;Searching&lt;/a&gt;&lt;/strong&gt;: This section presents an overview of the search process in Solr. It describes the main components used in searches, including request handlers, query parsers, and response writers. It lists the query parameters that can be passed to Solr, and it describes features such as boosting and faceting, which can be used to fine-tune search results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;the-well-configured-solr-instance.html#the-well-configured-solr-instance&quot;&gt;The Well-Configured Solr Instance&lt;/a&gt;&lt;/strong&gt;: This section discusses performance tuning for Solr. It begins with an overview of the &lt;code&gt;solrconfig.xml&lt;/code&gt; file, then tells you how to configure cores with &lt;code&gt;solr.xml&lt;/code&gt;, how to configure the Lucene index writer, and more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;managing-solr.html#managing-solr&quot;&gt;Managing Solr&lt;/a&gt;&lt;/strong&gt;: This section discusses important topics for running and monitoring Solr. Other topics include how to back up a Solr instance, and how to run Solr with Java Management Extensions (JMX).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;solrcloud.html#solrcloud&quot;&gt;SolrCloud&lt;/a&gt;&lt;/strong&gt;: This section describes the newest and most exciting of Solr&amp;#8217;s new features, SolrCloud, which provides comprehensive distributed capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;legacy-scaling-and-distribution.html#legacy-scaling-and-distribution&quot;&gt;Legacy Scaling and Distribution&lt;/a&gt;&lt;/strong&gt;: This section tells you how to grow a Solr distribution by dividing a large index into sections called shards, which are then distributed across multiple servers, or by replicating a single index across multiple services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;client-apis.html#client-apis&quot;&gt;Client APIs&lt;/a&gt;&lt;/strong&gt;: This section tells you how to access Solr through various client APIs, including JavaScript, JSON, and Ruby.&lt;/p&gt;
&lt;/div&gt;</description>
            <link>https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/apache-solr-reference-guide.html</link>
            <guid isPermaLink="true">https://home.apache.org/~ctargett/RefGuidePOC/jekyll-full/apache-solr-reference-guide.html</guid>
            
        </item>
        
    </channel>
</rss>
