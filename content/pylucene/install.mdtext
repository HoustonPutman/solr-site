
##Building PyLucene

PyLucene is completely code-generated by JCC whose sources are
included with the PyLucene sources.<br/>


##Requirements

To build PyLucene a Java Development Kit (JDK)
and <a href="http://ant.apache.org">Ant</a> are required; use of the
resulting PyLucene binaries requires only a Java Runtime Environment
(JRE).

<b>Attention:</b> Starting with release 4.8.0, Lucene requires Java 1.7 at
the minimum; Java 1.6 is no longer supported.

On Mac OS X, Java 6 is still a common default, please upgrade if you haven't 
done so already. A common upgrade is <a href="http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jdk.html">Oracle Java 1.7 for Mac OS X</a>.

On Mac OS X, once installed, a way to make Java 1.7 the default in your bash 
shell is:<br/>
 <code>  $ export JAVA_HOME=\`/usr/libexec/java_home\`</code>
Be sure to verify that JAVA_HOME value.

On any system, if you're upgrading your Java installation, please rebuild
JCC as well. You must use the same version of Java for both JCC and PyLucene.


The <a href="http://pypi.python.org/pypi/setuptools">setuptools</a>
package is required to build and run PyLucene on Python 2.3.5. With
later versions of Python, setuptools is only required for shared
mode. See JCC's <a href="jcc/install.html">installation
instructions</a> for more information.


##For the Impatient Ones

- <b>pushd jcc</b>
- <i>&lt;edit _setup.py_ to match your environment&gt;</i>
- <b>python setup.py build</b>
- <b>sudo python setup.py install</b>
- <b>popd</b>
- <i>&lt;edit _Makefile_ to match your environment&gt;</i>
- <b>make</b>
- <b>make test</b> (look for failures)
- <b>sudo make install</b>


##For the Rest of Us

Before building PyLucene, JCC must be
built first. See
JCC's <a href="jcc/install.html">installation
instructions</a> for building and installing it.

Once JCC is built and installed, PyLucene is built
via <i>make</i> which invokes JCC. See PyLucene's
<i>Makefile</i> for configuration instructions.

There are limits to both how many files can fit on the command
line and how large a C++ file the C++ compiler can handle.
By default, JCC generates one large C++ file containing the source
code for all wrapper classes.

Using the --files command line argument, this behaviour can be
tuned to workaround various limits, for example:


- to break up the large wrapper class file into about 2 files:<br/>
<code>--files 2</code>

- to break up the large wrapper class file into about 10 files:<br/>
<code>--files 10</code>

- to generate one C++ file per Java class wrapped:<br/>
<code>--files separate</code>


##Notes for Solaris 11 with Sun Studio C++ 12

PyLucene's Makefile is a GNU Makefile. Be sure to
use <i>gmake</i> instead of plain <i>make</i>.


Just as when building JCC, Python's distutils must be nudged a bit to
invoke the correct compiler. Sun Studio's C compiler is
called <i>cc</i> while its C++ compiler is
called <i>CC</i>.<br/>

To build PyLucene, use the following shell command to ensure that
the C++ compiler is used:<br/>
<code>
$ CC=CC gmake
</code>


##Notes for Solaris 11.1 with GCC 4.5

PyLucene's Makefile is a GNU Makefile. Be sure to use gmake instead of plain
make.
                                                                                
- Edit Makefile and do the following changes:                                  
Insert and enable a Solaris-Section with the following content
<code>
# Solaris   (Solaris 11.1, Python 2.6, 32-bit, Java 1.7)
PREFIX_PYTHON=/usr
ANT=/usr/bin/ant
PYTHON=$(PREFIX_PYTHON)/bin/python
JCC=$(PYTHON) -m jcc.__main__ --reserved DEFAULT_TYPE
NUM_FILES=4
</code>
- gmake
- su gmake install
