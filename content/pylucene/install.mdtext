
#Building PyLucene

PyLucene is completely code-generated by JCC whose sources are
included with the PyLucene sources.<br/>


#Requirements

To build PyLucene a Java Development Kit (JDK)
and <a href="http://ant.apache.org">Ant</a> are required; use of the
resulting PyLucene binaries requires only a Java Runtime Environment
(JRE).


The <a href="http://pypi.python.org/pypi/setuptools">setuptools</a>
package is required to build and run PyLucene on Python 2.3.5. With
later versions of Python, setuptools is only required for shared
mode. See JCC's <a href="jcc/install.html">installation
instructions</a> for more information.


#For the Impatient Ones

- <code>pushd jcc</code>
- &lt;edit <code>setup.py</code> to match your environment&gt;
- <code>python setup.py build</code>
- <code>sudo python setup.py install</code>
- <code>popd</code>
- &lt;edit <code>Makefile</code> to match your environment&gt;
- <code>make</code>
- <code>sudo make install</code>
- <code>make test</code> (look for failures)


#For the Rest of Us

Before building PyLucene, JCC must be
built first. See
JCC's <a href="jcc/install.html">installation
instructions</a> for building and installing it.

Once JCC is built and installed, PyLucene is built
via <code>make</code> which invokes JCC. See PyLucene's
<code>Makefile</code> for configuration instructions.

There are limits to both how many files can fit on the command
line and how large a C++ file the C++ compiler can handle.
By default, JCC generates one large C++ file containing the source
code for all wrapper classes.

Using the --files command line argument, this behaviour can be
tuned to workaround various limits, for example:


- to break up the large wrapper class file into about 2 files:<br/>
<code>--files 2</code>

- to break up the large wrapper class file into about 10 files:<br/>
<code>--files 10</code>

- to generate one C++ file per Java class wrapped:<br/>
<code>--files separate</code>


#Notes for Solaris

PyLucene's Makefile is a GNU Makefile. Be sure to
use <code>gmake</code> instead of plain <code>make</code>.


Just as when building JCC, Python's distutils must be nudged a bit to
invoke the correct compiler. Sun Studio's C compiler is
called <code>cc</code> while its C++ compiler is
called <code>CC</code>.<br/>


To build PyLucene, use the following shell command to ensure that
the C++ compiler is used:<br/>
<code>
$ CC=CC gmake
</code>

